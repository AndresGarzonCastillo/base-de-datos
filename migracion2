1.	Persona con el mejor puntaje en cada materia

SELECT e.ESTU_CONSECUTIVO, e.ESTU_GENERO, e.ESTU_EDAD, e.ESTU_RESIDE_MCPIO, l.ESTU_PUESTO, p.PUNT_LENGUAJE
FROM estudiante e JOIN lugar l ON e.ESTU_CONSECUTIVO = l.ESTU_CONSECUTIVO
JOIN puntuaciones p ON e.ESTU_CONSECUTIVO = p.ESTU_CONSECUTIVO ORDER BY p.PUNT_LENGUAJE DESC LIMIT 1;

SELECT e.ESTU_CONSECUTIVO, e.ESTU_GENERO, e.ESTU_EDAD, e.ESTU_RESIDE_MCPIO, l.ESTU_PUESTO, p.PUNT_MATEMATICAS
FROM estudiante e JOIN lugar l ON e.ESTU_CONSECUTIVO = l.ESTU_CONSECUTIVO
JOIN puntuaciones p ON e.ESTU_CONSECUTIVO = p.ESTU_CONSECUTIVO ORDER BY p.PUNT_LENGUAJE DESC LIMIT 1;

SELECT e.ESTU_CONSECUTIVO, e.ESTU_GENERO, e.ESTU_EDAD, e.ESTU_RESIDE_MCPIO, l.ESTU_PUESTO, p.PUNT_C_SOCIALES
FROM estudiante e JOIN lugar l ON e.ESTU_CONSECUTIVO = l.ESTU_CONSECUTIVO
JOIN puntuaciones p ON e.ESTU_CONSECUTIVO = p.ESTU_CONSECUTIVO ORDER BY p.PUNT_LENGUAJE DESC LIMIT 1;

SELECT e.ESTU_CONSECUTIVO, e.ESTU_GENERO, e.ESTU_EDAD, e.ESTU_RESIDE_MCPIO, l.ESTU_PUESTO, p.PUNT_FILOSOFIA
FROM estudiante e JOIN lugar l ON e.ESTU_CONSECUTIVO = l.ESTU_CONSECUTIVO
JOIN puntuaciones p ON e.ESTU_CONSECUTIVO = p.ESTU_CONSECUTIVO ORDER BY p.PUNT_LENGUAJE DESC LIMIT 1;

SELECT e.ESTU_CONSECUTIVO, e.ESTU_GENERO, e.ESTU_EDAD, e.ESTU_RESIDE_MCPIO, l.ESTU_PUESTO, p.PUNT_BIOLOGIA
FROM estudiante e JOIN lugar l ON e.ESTU_CONSECUTIVO = l.ESTU_CONSECUTIVO
JOIN puntuaciones p ON e.ESTU_CONSECUTIVO = p.ESTU_CONSECUTIVO ORDER BY p.PUNT_LENGUAJE DESC LIMIT 1;

SELECT e.ESTU_CONSECUTIVO, e.ESTU_GENERO, e.ESTU_EDAD, e.ESTU_RESIDE_MCPIO, l.ESTU_PUESTO, p.PUNT_QUIMICA
FROM estudiante e JOIN lugar l ON e.ESTU_CONSECUTIVO = l.ESTU_CONSECUTIVO
JOIN puntuaciones p ON e.ESTU_CONSECUTIVO = p.ESTU_CONSECUTIVO ORDER BY p.PUNT_LENGUAJE DESC LIMIT 1;

SELECT e.ESTU_CONSECUTIVO, e.ESTU_GENERO, e.ESTU_EDAD, e.ESTU_RESIDE_MCPIO, l.ESTU_PUESTO, p.PUNT_FISICA
FROM estudiante e JOIN lugar l ON e.ESTU_CONSECUTIVO = l.ESTU_CONSECUTIVO
JOIN puntuaciones p ON e.ESTU_CONSECUTIVO = p.ESTU_CONSECUTIVO ORDER BY p.PUNT_LENGUAJE DESC LIMIT 1;

SELECT e.ESTU_CONSECUTIVO, e.ESTU_GENERO, e.ESTU_EDAD, e.ESTU_RESIDE_MCPIO, l.ESTU_PUESTO, p.PUNT_INGLES
FROM estudiante e JOIN lugar l ON e.ESTU_CONSECUTIVO = l.ESTU_CONSECUTIVO
JOIN puntuaciones p ON e.ESTU_CONSECUTIVO = p.ESTU_CONSECUTIVO ORDER BY p.PUNT_LENGUAJE DESC LIMIT 1;

2.	Colegio con el mejor puntaje promedio

SELECT COLE_NOMBRE_SEDE AS NombreColegio, AVG (PUNT_LENGUAJE) AS PromedioLenguaje, AVG (PUNT_MATEMATICAS) AS PromedioMatematicas, AVG (PUNT_C_SOCIALES) AS PromedioCSociales, AVG(PUNT_FILOSOFIA) AS PromedioFilosofia,
    AVG(PUNT_BIOLOGIA) AS PromedioBiologia, AVG(PUNT_QUIMICA) AS PromedioQuimica, AVG(PUNT_FISICA) AS PromedioFisica, AVG(PUNT_INGLES) AS PromedioIngles FROM puntuaciones GROUP BY COLE_NOMBRE_SEDE ORDER BY (PromedioLenguaje + PromedioMatematicas + PromedioCSociales + PromedioFilosofia + PromedioBiologia + PromedioQuimica + PromedioFisica + PromedioIngles) / 8 DESC LIMIT 1;

3.	Cantidad de personas con nivel de inglés superior a B1

SELECT COUNT(*) AS "Cantidad de Estudiantes" FROM estudiante JOIN lugar ON estudiante.ESTU_CONSECUTIVO = lugar.ESTU_CONSECUTIVO WHERE lugar.DESEMP_INGLES > 'B+';

4.	Municipio o ciudad con mayor cantidad de personas con nivel de inglés superior a B1

SELECT ESTU_RESIDE_MCPIO AS Municipio, COUNT(*) AS "Cantidad de estudiantes" FROM estudiante JOIN lugar ON estudiante.ESTU_CONSECUTIVO = lugar.ESTU_CONSECUTIVO WHERE lugar.DESEMP_INGLES > 'B+' GROUP BY ESTU_RESIDE_MCPIO ORDER BY "Cantidad de estudiantes" DESC LIMIT 1;

5.	Los cinco colegios no bilingües con mejor puntaje promedio en inglés

SELECT COLE_NOMBRE_SEDE AS "Nombre de Colegio", AVG(PUNT_INGLES) AS "Promedio en Ingles" FROM puntuaciones JOIN estudiante ON puntuaciones.ESTU_CONSECUTIVO = estudiante.ESTU_CONSECUTIVO WHERE COLE_NOMBRE_SEDE NOT LIKE '%BILIN%' GROUP BY COLE_NOMBRE_SEDE ORDER BY "Promedio en Ingles" DESC LIMIT 5;

6.	Persona con mejor puntaje en matemáticas por género
SELECT   e.ESTU_GENERO, e.ESTU_CONSECUTIVO, e.ESTU_EDAD, e.ESTU_RESIDE_MCPIO, l.ESTU_PUESTO, p.PUNT_MATEMATICAS AS MejorPuntajeMatematicas FROM estudiante e INNER JOIN puntuaciones p ON e.ESTU_CONSECUTIVO = p.ESTU_CONSECUTIVO INNER JOIN lugar l ON e.ESTU_CONSECUTIVO = l.ESTU_CONSECUTIVO WHERE (e.ESTU_GENERO, p.PUNT_MATEMATICAS) IN (SELECT ESTU_GENERO, MAX(PUNT_MATEMATICAS) AS MaxPuntajeMatematicas FROM puntuaciones GROUP BY ESTU_GENERO)
ORDER BY e.ESTU_GENERO;
3.	ETL: Haciendo uso de herramientas o medios de su elección, realice el proceso ETL de los datos relevantes en la información del ICFES para dar solución a los requisitos de migración.

CREATE TABLE estudiante (
    ESTU_CONSECUTIVO INT PRIMARY KEY,
    ESTU_EDAD INT,
    ESTU_GENERO VARCHAR(255),
    PERIODO_ANNO INT,
    ESTU_RESIDE_DEPTO VARCHAR(255),
    ESTU_RESIDE_MCPIO VARCHAR(255),
    ESTU_TIPO_DOCUMENTO VARCHAR(255)
);

CREATE TABLE puntuaciones (
    ESTU_CONSECUTIVO INT,
    COLE_NOMBRE_SEDE VARCHAR(255),
    PUNT_LENGUAJE INT,
    PUNT_MATEMATICAS INT,
    PUNT_C_SOCIALES INT,
    PUNT_FILOSOFIA INT,
    PUNT_BIOLOGIA INT,
    PUNT_QUIMICA INT,
    PUNT_FISICA INT,
    PUNT_INGLES INT,
    FOREIGN KEY (ESTU_CONSECUTIVO) REFERENCES estudiante(ESTU_CONSECUTIVO)
);

CREATE TABLE lugar (
    ESTU_CONSECUTIVO INT,
    DESEMP_INGLES VARCHAR(255),
    NOMBRE_COMP_FLEXIBLE VARCHAR(255),
    ESTU_PUESTO INT,
    FOREIGN KEY (ESTU_CONSECUTIVO) REFERENCES estudiante(ESTU_CONSECUTIVO)
);

4.	Carga de datos: Realice el proceso de carga de datos acorde con su Modelo Relacional y los datos resultantes del proceso ETL.

LOAD DATA INFILE 'C:/wamp64/tmp/icfes.csv'
INTO TABLE estudiante
FIELDS TERMINATED BY ';'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA INFILE 'C:/wamp64/tmp/icfes.csv'
INTO TABLE lugar
FIELDS TERMINATED BY ';'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA INFILE 'C:/wamp64/tmp/icfes.csv'
INTO TABLE puntuacion
FIELDS TERMINATED BY ';'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;
